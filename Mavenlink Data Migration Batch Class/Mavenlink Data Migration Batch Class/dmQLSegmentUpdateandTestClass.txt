//Use this class for the Segment Update
global class dmQLSegmentUpdate implements Database.Batchable<AggregateResult> {
  // The batch job starts
  global Iterable<AggregateResult> start(Database.BatchableContext bc){
    String querySplitForQLImportForQLSegmentUpdate = 'SELECT count(Id), Quote__c' 
               + ' FROM dm_Split_ForQLImport__c Group By Quote__c ';//Having '
              // + ' Number__c = null and Quote_Group__c = null  ';
 //QL - Line Level Total Update at Quote Group level
   String queryForQLNetTotalUpdate = 'SELECT count(Id), SBQQ__Quote__c,Quote_Group__c ' 
               + ' FROM SBQQ__QuoteLine__c Group By SBQQ__Quote__c,Quote_Group__c,SBQQ__Quote__r.DM_ErrorQuote__c,DM_QuoteLine__c '  
               + ' Having SBQQ__Quote__r.DM_ErrorQuote__c = true and DM_QuoteLine__c = true ';
   
    return new dmIterable(querySplitForQLImportForQLSegmentUpdate);//queryForQLNetTotalUpdate);//querySplitForQLImportForQLSegmentUpdate);
  } 
  /*
  //executeQLTotal update at CPQ QL QLTotal
  global void executeQLAmountAtQuoteGroup(Database.BatchableContext bc, List<sObject> scope){
    List<SBQQ__QuoteLine__c> forUpdateQuoteLine = new List<SBQQ__QuoteLine__c>();
    Set<String> qId = new Set<String>();
    for(sObject sObj : scope) {
      AggregateResult ar = (AggregateResult)sObj;
        qId.add(String.ValueOf(ar.get('SBQQ__Quote__c')));
      System.debug('>>>> COUNT : ' + ar.get('SBQQ__Quote__c'));
    } 
     //Total Update in QL table List<dm_Split_ForQLImport__c> qlForSegments //For Segment Update
      Map<String,List<SBQQ__QuoteLine__c>> quoteToQlMap = new Map<String,List<SBQQ__QuoteLine__c>>(); 
     List<SBQQ__QuoteLine__c> qlForTotalUpdate  = [SELECT Id,SBQQ__Quote__c ,dm_Old_Opp_Prod_Id__c,SBQQ__Product__c,dm_QGroupTotalForErrFix__c,SBQQ__NetTotal__c,Quote_Group__c FROM SBQQ__QuoteLine__c where 
                                                SBQQ__Quote__r.DM_ErrorQuote__c = true and DM_QuoteLine__c = true 
                                                and SBQQ__Quote__c in :qId];
      for(SBQQ__QuoteLine__c ql : qlForTotalUpdate)
      {
          if(ql.SBQQ__Quote__c != null)
          {
              if(quoteToQlMap.containsKey(ql.SBQQ__Quote__c))
              quoteToQlMap.get(ql.SBQQ__Quote__c).add(ql);
              else 
              quoteToQlMap.put(ql.SBQQ__Quote__c,new List<SBQQ__QuoteLine__c>{ql});
          }
      }
      //Get the Quote Lines and set the total details
      for(String quoteId : quoteToQlMap.keySet())   
      {
         List<SBQQ__QuoteLine__c> qls = quoteToQlMap.get(quoteId);
         //Get the Product to QL map
          Map<String,List<SBQQ__QuoteLine__c>> pdtToQLs = getProductToQL(qls);
          if(pdtToQLs != null && pdtToQLs.size()>0)
          {   
              Map<String,Decimal> qlToTotal = new  Map<String,Decimal>();
              for(String pdtIdWithDisc : pdtToQLs.keySet())
              {
                  List<SBQQ__QuoteLine__c> temp = pdtToQLs.get(pdtIdWithDisc);
                  Decimal amount = 0;
                  for(SBQQ__QuoteLine__c qlineForPdt : temp)
                  {
					 amount = amount + qlineForPdt.SBQQ__NetTotal__c;
                  }
                  qlToTotal.put(pdtIdWithDisc,amount);
              }
              for(String pdtIdWithDisc : pdtToQLs.keySet())
              {
                  List<SBQQ__QuoteLine__c> temp = pdtToQLs.get(pdtIdWithDisc);
                  for(SBQQ__QuoteLine__c qlineForPdt : temp)
                  {
                      qlineForPdt.dm_QGroupTotalForErrFix__c = qlToTotal.get(pdtIdWithDisc);
                      forUpdateQuoteLine.add(qlineForPdt);
                  }
                  
              }
                      
                      
          }
          qls.clear();
      }
      if(forUpdateQuoteLine.size()>0)
          Database.update(forUpdateQuoteLine);
  }
*/
  // The batch job executes and operates on one batch of records
  global void execute(Database.BatchableContext bc, List<sObject> scope){
    List<dm_Split_ForQLImport__c> forUpdateQuoteLine = new List<dm_Split_ForQLImport__c>();
    Set<String> qId = new Set<String>();
    for(sObject sObj : scope) {
      AggregateResult ar = (AggregateResult)sObj;
        qId.add(String.ValueOf(ar.get('Quote__c')));
      System.debug('>>>> COUNT : ' + ar.get('Quote__c'));
    } 
      /*newObj.Quote_Group__c = String.valueOf(i+1);
                newObj.SegmentKey__c = oppProdObj.Id;
               newObj.SegmentIndex__c = i+1;
               newObj.SegmentLabel__c = 'Year '+i+1;
               newObj.Number__c = i+1;*/
               //Dimension__c*/
      //Segment Update in Temp table List<dm_Split_ForQLImport__c> qlForSegments //For Segment Update
      Map<String,List<dm_Split_ForQLImport__c>> quoteToQlMap = new Map<String,List<dm_Split_ForQLImport__c>>(); 
     List<dm_Split_ForQLImport__c> qlForSegments  = [SELECT Id, Product__c,Product__r.Name, Quote__c,
                 Opportunity_Product__c,Quote_Group__c, SegmentKey__c, Number__c,ChargeType__c 
                   from dm_Split_ForQLImport__c where Quote__c in :qId order by SegmentIndex__c ];
                     // and Quote__r.SBQQ__Opportunity2__r.RecordType.Name in ('Additional Opportunity','Add-On','Adjustment Opportunity','Assisted User Expansion')
                       //  order by Start_Date__c  ];
      for(dm_Split_ForQLImport__c ql : qlForSegments)
      {
          if(ql.Quote__c != null)
          {
              if(quoteToQlMap.containsKey(ql.Quote__c))
              quoteToQlMap.get(ql.Quote__c).add(ql);
              else 
              quoteToQlMap.put(ql.Quote__c,new List<dm_Split_ForQLImport__c>{ql});
          }
      }
      //Get the Quote Lines and set the segmentation details
      for(String quoteId : quoteToQlMap.keySet())   
      {
         // Integer segNumber = 1;
         //  System.debug('segNumber 1:'+ segNumber);
          List<dm_Split_ForQLImport__c> qls = quoteToQlMap.get(quoteId);
         
          //Get the Product to QL map
          Map<String,List<dm_Split_ForQLImport__c>> pdtToQLs = getProductToQL(qls);
          if(pdtToQLs.size()>0)
          {   
              Integer segNumber = 1;
              for(String pdtIdWithDisc : pdtToQLs.keySet())
              {
                  List<dm_Split_ForQLImport__c> temp = pdtToQLs.get(pdtIdWithDisc);
				  for(dm_Split_ForQLImport__c qlineForPdt : temp)
                  {
                      qlineForPdt.Number__c = segNumber;
                      qlineForPdt.Quote_Group__c = String.valueOf(segNumber);
                      if(qlineForPdt.ChargeType__c == 'Recurring'){
                      qlineForPdt.SegmentKey__c = 'QL'+ segNumber;
                      }
                      forUpdateQuoteLine.add(qlineForPdt);
                  }
                         segNumber = segNumber + 1;
              }
          }
          qls.clear();
      }
      if(forUpdateQuoteLine.size()>0)
          Database.update(forUpdateQuoteLine);
  }
/*   
public static Map<String,List<SBQQ__QuoteLine__c >> getProductToQL(List<SBQQ__QuoteLine__c > qls)
   {
       Map<String,List<SBQQ__QuoteLine__c >> pdtToQL = new  Map<String,List<SBQQ__QuoteLine__c >>();
       for(SBQQ__QuoteLine__c  ql : qls)
       {
          if(ql.SBQQ__NetTotal__c == null) return null;
          //LicensePrice
           
          // if(pdtToQL.containsKey(ql.Product__c+'-'+ql.Id))//LicensePrice
            if(pdtToQL.containsKey(ql.SBQQ__Product__c+'-'+ql.dm_Old_Opp_Prod_Id__c))//+'-'+ql.LicensePrice__c))//LicensePrice
               pdtToQL.get(ql.SBQQ__Product__c+'-'+ql.dm_Old_Opp_Prod_Id__c).add(ql);//+'-'+ql.LicensePrice__c)
            else pdtToQL.put(ql.SBQQ__Product__c+'-'+ql.dm_Old_Opp_Prod_Id__c,new List<SBQQ__QuoteLine__c >{ql});
           
       }
       return pdtToQL;
   }*/
    //QL - Helper 
public static Map<String,List<dm_Split_ForQLImport__c>> getProductToQL(List<dm_Split_ForQLImport__c> qls)
   {
       Map<String,List<dm_Split_ForQLImport__c>> pdtToQL = new  Map<String,List<dm_Split_ForQLImport__c>>();
       for(dm_Split_ForQLImport__c ql : qls)
       {
          //LicensePrice
           /*if(pdtToQL.containsKey(ql.Product__c))
               pdtToQL.get(ql.Product__c).add(ql);
            else pdtToQL.put(ql.Product__c,new List<dm_Split_ForQLImport__c>{ql});*/
          // if(pdtToQL.containsKey(ql.Product__c+'-'+ql.Id))//LicensePrice
            if(pdtToQL.containsKey(ql.Product__c+'-'+ql.Opportunity_Product__c))//+'-'+ql.LicensePrice__c))//LicensePrice
               pdtToQL.get(ql.Product__c+'-'+ql.Opportunity_Product__c).add(ql);//+'-'+ql.LicensePrice__c)
            else pdtToQL.put(ql.Product__c+'-'+ql.Opportunity_Product__c,new List<dm_Split_ForQLImport__c>{ql});
           
       }
       return pdtToQL;
   }
  // The batch job finishes
  global void finish(Database.BatchableContext bc){ }
}
@isTest
public class dmQLSegmentUpdateTest {
@testSetup
    static void setup(){
        
         //Account Creation
        Account objAccount = TestDataUtility.createAccount(
            'Test Account'
        );
        insert objAccount;
        List<Account> accId = [Select ID from Account where Name = 'Test Account' Limit 1];
     
        // Opportunity Creation
        Opportunity objOpportunity = TestDataUtility.createOpportunity(
            'Test Opportunity',
            objAccount.Id,
            'Closed Won',
            Date.Today().Adddays(30),
            'New',
            Test.getStandardPricebookId()
        );
        insert objOpportunity;
        List<Opportunity> oppId = [Select ID from Opportunity where Name = 'Test Opportunity'  Limit 1];
        
         // Product Creation
        Product2 objProduct = TestDataUtility.createProduct(
            'Test Product',
            true,
            'Quantity',
            'Services',
            'pc1',
            'pc2',
            'pc3',
            'One-Time',
            null,
            'One-time',
            24,
            'Fixed Price',
            'List',null ,null ,null 
        );
        insert objProduct;
        
        
        // PriceBookEntry Creation
        PriceBookEntry objPriceBookEntry = TestDataUtility.createpriceBookEntry(
            Test.getStandardPricebookId(),
            objProduct.Id,
            100000.00,
            True
        );
        insert objPriceBookEntry;
         
        // Quote Creation
        SBQQ__Quote__c objQuote1 = TestDataUtility.createCPQQuote(
            true,
            'Quote',
            'ProductFamily__c',
            'Annual',
            'Front Load',
            24,
            date.today(),
            date.today().addMonths(24),
            objOpportunity.Id,
            objAccount.Id,
            'Draft'
        ); 
        insert objQuote1;
        
        // Quote Creation
        SBQQ__Quote__c objQuote = TestDataUtility.createCPQQuote(
            true,
            'Quote',
            'ProductFamily__c',
            'Annual',
            'Front Load',
            24,
            date.today(),
            date.today().addMonths(24),
            objOpportunity.Id,
            objAccount.Id,
            'Draft'
        ); 
        objQuote.SBQQ__BillingFrequency__c= 'Monthly';
        objQuote.DM_Quote__c = True;
        objQuote.Manual_Fix__c = true;
        objQuote.SBQQ__Source__c =objQuote1.Id ;
        objQuote.SBQQ__Opportunity2__c = objOpportunity.Id;
        objQuote.DM_ErrorQuote__c = true;
        objQuote.SBQQ__SubscriptionTerm__c = 24;
        
        insert objQuote;
        
        // QuoteLine Creation
        SBQQ__QuoteLine__c objQuoteLine = TestDataUtility.createCPQQuoteLine(
            objPriceBookEntry.Id,
            1,
            objQuote.Id,
            3,
            objProduct.Id,
            Date.Today(),
            Date.Today().AddMonths(24)
        );
        objQuoteLine.Free_Months__c = 3;
        objQuoteLine.SBQQ__BillingFrequency__c = Null;
        objQuoteLine.SBQQ__ChargeType__c = 'Recurring';
        objQuoteLine.Quote_Group__c = 'Quote Group';
        objQuoteLine.DM_QuoteLine__c = true;
        insert objQuoteLine;
        
        // Order Creation
        Order objOrder = TestDataUtility.createOrder(
            objAccount.id,
            'New',
            'Draft',
            Date.today(),
            Date.today().AddMonths(24),
            '1',
            'Net 15',
            objQuote.Id,
            objOpportunity.Id
        );
        insert objOrder;
        
        //dm_Split_ForQLImport__c creation
        
        dm_Split_ForQLImport__c ObjdmSplitforQl = new dm_Split_ForQLImport__c();
        ObjdmSplitforQl.Quote__c = objQuote1.Id;
        ObjdmSplitforQl.Product__c = objProduct.Id;
        ObjdmSplitforQl.Opportunity_Product__c = 'aEb780000004lLBCAY';
        ObjdmSplitforQl.SegmentKey__c = 'Ql1';
        ObjdmSplitforQl.Number__c = 1;
        ObjdmSplitforQl.ChargeType__c = 'Recurring';
        insert ObjdmSplitforQl;
        
        dm_Split_ForQLImport__c ObjdmSplitforQl1 = new dm_Split_ForQLImport__c();
        ObjdmSplitforQl1.Quote__c = objQuote1.Id;
        
        insert ObjdmSplitforQl1;
        
    }
     @isTest
   static void dmQLSegmentUpdateTest1(){
        Test.startTest();
        dmQLSegmentUpdate bc = new dmQLSegmentUpdate();
        Id batchId = Database.executeBatch(bc);
        Test.stopTest();

   }
}