//Use basicValidationBatch - for all the lookup update
//Use this class for the Invoice Create and Invoice Lines Create - in Temp table Invoice Invoices with lookups
//Invoice Create - use execute - Update DM_InvoiceMain flag as true in the Temp Table then grab the records and import
//Moved to new Batch -Invoice Lines Create - use  execute1- Update Invoice Id in the Temp Table, then grab the records and import
//Moved to new batch - Get the Payment Allocations - queryPaymentForPayAllocation
global class dm_InvoicesIteratorBatch implements Database.Batchable<AggregateResult> {
  // The batch job starts
  global Iterable<AggregateResult> start(Database.BatchableContext bc){
    String queryInvoiceInvLines = 'SELECT count(Id),Invoice_Invoice_Number__c,Opportunity__c ' 
               + ' FROM dm_Invoice_InvoiceLine__c Group By Opportunity__c ,Invoice_Invoice_Number__c,Quote__c,Order__c,Quote__r.Manual_Fix__c '
              // + ' having Opportunity__c != null and Quote__c != null and Order__c != null ';====no manual fix
              + ' having Opportunity__c != null and Quote__c != null and Order__c != null  '
              + ' and Quote__r.Manual_Fix__c = true ';
   /*  String queryInvLinesForAllocation = 'Select count(Id),blng__Invoice__r.Zuora_Invoice_Number__c from blng__InvoiceLine__c '
                    + ' group by blng__Invoice__r.Zuora_Invoice_Number__c, DM_InvLine__c,blng__Invoice__r.DM_Invoice__c '
                    + ' having DM_InvLine__c = true and '
                    + ' blng__Invoice__r.DM_Invoice__c = true and blng__Invoice__r.Zuora_Invoice_Number__c != null';
      String queryPaymentForPayAllocation = 'Select count(Id),blng__Invoice__c,Zuora_Invoice_Number__c from blng__Payment__c '
                     +' group by blng__Invoice__c,Zuora_Invoice_Number__c,DM_Payment__c  '
                     +'  having DM_Payment__c = true and Zuora_Invoice_Number__c != null';*/
    return new dmIterable(queryInvoiceInvLines);
  } 
  //*******************Invoice Create: Get the Unique Invoice Number under the Opportunity and add the flag InvocieMain - for Invoice Creation
  global void execute(Database.BatchableContext bc, List<sObject> scope){
    //Get the Group by records based on the Opportunity and Zuora Invoice number
    List<dm_Invoice_InvoiceLine__c> forUpdateInv = new List<dm_Invoice_InvoiceLine__c>();
    Set<String> oppId = new Set<String>();
    for(sObject sObj : scope) {
      AggregateResult ar = (AggregateResult)sObj;
        oppId.add(String.ValueOf(ar.get('Opportunity__c')));
      System.debug('>>>> COUNT : ' + ar.get('Opportunity__c'));
    }
     //Get the List of Opportunity Records and group it based on the Invoice Number
     Map<String,dm_Invoice_InvoiceLine__c> invNumberToInvExlMap = new Map<String,dm_Invoice_InvoiceLine__c>(); 
     List<dm_Invoice_InvoiceLine__c> invExlForInvoices  = [Select Id, Invoice__c,InvoiceMain__c,Opportunity__c,Product_Name__c,Product__c,
                                                           ProductNameCPQ__c,Order__c,Quote__c,Invoice_Invoice_Number__c 
                                                           from dm_Invoice_InvoiceLine__c where Invoice_Invoice_Number__c != null and 
                                                           Opportunity__c != null and Order__c != null and Quote__c != null and Order__c != null
                                                           and Invoice__c = null and Opportunity__c in :oppId];//add flag fro checkbox dm1
      for(dm_Invoice_InvoiceLine__c inv : invExlForInvoices)
      {
          if(inv.Invoice_Invoice_Number__c != null)
          {
              if(! invNumberToInvExlMap.containsKey(inv.Invoice_Invoice_Number__c))
              invNumberToInvExlMap.put(inv.Invoice_Invoice_Number__c,inv);
          }
      }
      //Add the InvoiceMain__c flag for the Unique Invoice Number records for Invoice Creation
      //After this update collect the Opportunity != null and InvoiceMain__c = true will get the unique reccords
      for(String invNumber : invNumberToInvExlMap.keySet())   
      {
          invNumberToInvExlMap.get(invNumber).InvoiceMain__c = true;
          forUpdateInv.add(invNumberToInvExlMap.get(invNumber));
      }
      if(forUpdateInv.size()>0)
          Database.update(forUpdateInv);
  }
  
  //*******************Invoice Lines Create : Once the Invoices are created with above export, need to map the Invoice id in all the Line items.
  //Get the Unique Invoice Number under the Opportunity and add the flag InvocieMain - for Invoice Creation
 /* global void executeInvLine(Database.BatchableContext bc, List<sObject> scope){
    //Get the Group by records based on the Opportunity
     //InvExcel  Invoice Id - for line items
     //Updat the Invoice Id based on the Invoice Number and Opportunity
    List<dm_Invoice_InvoiceLine__c> forUpdateInvExl = new List<dm_Invoice_InvoiceLine__c>();
    Map<String,List<dm_Invoice_InvoiceLine__c>> oppToInvExl = new Map<String,List<dm_Invoice_InvoiceLine__c>>();
    Map<String,blng__Invoice__c> oppToBillingInv = new Map<String,blng__Invoice__c>();
    Set<String> oppIds = new Set<String>();
    for(sObject sObj : scope) {
      AggregateResult ar = (AggregateResult)sObj;
        oppIds.add(String.ValueOf(ar.get('Opportunity__c')));
      System.debug('>>>> COUNT : ' + ar.get('Opportunity__c'));
    }
     //Get the List of Opportunity Records and group it based on the Invoice Number
     Map<String,List<dm_Invoice_InvoiceLine__c>> invNumberToInvExlMap = new Map<String,List<dm_Invoice_InvoiceLine__c>>(); 
     List<dm_Invoice_InvoiceLine__c> invExlForInvoices  = [Select Id, Invoice__c,InvoiceMain__c,Opportunity__c,Product_Name__c,Product__c,
                                                           ProductNameCPQ__c,Order__c,Quote__c,Invoice_Invoice_Number__c 
                                                           from dm_Invoice_InvoiceLine__c where Invoice_Invoice_Number__c != null and Quote__c != null and 
                                                           Opportunity__c != null and Invoice__c = null
                                                           and Opportunity__c in :oppIds];
      for(dm_Invoice_InvoiceLine__c inv : invExlForInvoices)
      {
          if(inv.Invoice_Invoice_Number__c != null)
          {
              if(invNumberToInvExlMap.containsKey(inv.Invoice_Invoice_Number__c))
                   invNumberToInvExlMap.get(inv.Invoice_Invoice_Number__c).add(inv);
              else 
                  invNumberToInvExlMap.put(inv.Invoice_Invoice_Number__c,new List<dm_Invoice_InvoiceLine__c>{inv});
          }
      }
      //Get the Billing Invoices
      List<blng__Invoice__c> billingInvList = [Select Id,Opportunity__c,Zuora_Invoice_Number__c from blng__Invoice__c where
                                               Opportunity__c in :oppIds and 
                                               DM_Invoice__c =true];
      //Opp To Billing Inv Map with Zuora Invoice Number
      for(blng__Invoice__c inv : billingInvList)
      {
           System.debug('Blng contains:'+(inv.Opportunity__c+'-'+inv.Zuora_Invoice_Number__c));
          if(! oppToBillingInv.containsKey(inv.Opportunity__c+'-'+inv.Zuora_Invoice_Number__c))
              oppToBillingInv.put(inv.Opportunity__c+'-'+inv.Zuora_Invoice_Number__c,inv);
      }
      System.debug('invExlForInvoices Size:'+invExlForInvoices.size());
      System.debug('oppToBillingInv Size:'+oppToBillingInv.size());
      //Map the Inv Id to InvExcel using the Opp Id
      for(dm_Invoice_InvoiceLine__c invObj : invExlForInvoices)
      {
          System.debug('Contains:'+(invObj.Opportunity__c+'-'+invObj.Invoice_Invoice_Number__c));
          if(oppToBillingInv.containsKey(invObj.Opportunity__c+'-'+invObj.Invoice_Invoice_Number__c))
          {
              System.debug('IN Contains:'+(invObj.Opportunity__c+'-'+invObj.Invoice_Invoice_Number__c));
              invObj.Invoice__c = oppToBillingInv.get(invObj.Opportunity__c+'-'+invObj.Invoice_Invoice_Number__c).Id;
              forUpdateInvExl.add(invObj);
          }
      }
      System.debug('forUpdateInvExl Size:'+forUpdateInvExl.size());
      if(forUpdateInvExl.size()>0)
          Database.Update(forUpdateInvExl);
  }
*/ 
 ///*******************Payment Allocations Create : *************************
 //Once the Payments are created, need to get the Invoice Line Items with the Invoice number which 
 //should match the Payments Invoice Number
 //Generate the Values based on the Field Mapping excel to email then Load it.
  //Get the Unique Invoice Number under the Payment 
 /* global void execute(Database.BatchableContext bc, List<sObject> scope){
    //Get the Group by records based on the Invoice and Invoice Number
    List<dm_PayAllocInvLineTemp__c> forInsertAllocInvLi = new List<dm_PayAllocInvLineTemp__c>();
    Map<String,List<dm_Invoice_InvoiceLine__c>> oppToInvExl = new Map<String,List<dm_Invoice_InvoiceLine__c>>();
    Map<String,blng__Payment__c> invNumPaymentMap = new Map<String,blng__Payment__c>();
    Set<String> invNumbers = new Set<String>();
    Set<String> invoiceIds = new Set<String>();
    for(sObject sObj : scope) {
      AggregateResult ar = (AggregateResult)sObj;
        invNumbers.add(String.ValueOf(ar.get('Zuora_Invoice_Number__c')));
        invoiceIds.add(String.ValueOf(ar.get('blng__Invoice__c')));
       // invNumInvMap.put(String.ValueOf(ar.get('Zuora_Invoice_Number__c')),String.ValueOf(ar.get('blng__Invoice__c')));
     // System.debug('>>>> COUNT : ' + ar.get('Opportunity__c'));
    }
     //Get the Payment Records based on the invoice number inorder to get the ID
     List<blng__Payment__c> payments = [Select Id, blng__Invoice__c, Zuora_Invoice_Number__c from blng__Payment__c 
                        where DM_Payment__c = true and Zuora_Invoice_Number__c != null 
                                       and  Zuora_Invoice_Number__c in :invNumbers
                                       and blng__Invoice__c in :invoiceIds];
      for(blng__Payment__c payment : payments)
      {
          if(! invNumPaymentMap.containsKey(payment.Zuora_Invoice_Number__c))
          invNumPaymentMap.put(payment.Zuora_Invoice_Number__c,payment);
      }
     //Get the List of Opportunity Records and group it based on the Invoice Number
     Map<String,List<blng__InvoiceLine__c>> invNumberToBlngInvLineMap = new Map<String,List<blng__InvoiceLine__c>>(); 
     List<blng__InvoiceLine__c> blngInvLines  = [Select Id, blng__Invoice__c, blng__Invoice__r.Zuora_Invoice_Number__c,blng__Subtotal__c from 
                                                           blng__InvoiceLine__c 
                    								       Where DM_InvLine__c = true and blng__Invoice__r.DM_Invoice__c = true 
                                                           and blng__Invoice__r.Zuora_Invoice_Number__c != null
                                                           and blng__Invoice__r.Zuora_Invoice_Number__c in :invNumPaymentMap.keySet()
                                                           and blng__Invoice__c in :  invoiceIds];
      //Get the Billing Invoice Lines for the Invocie Numbers
      for(blng__InvoiceLine__c invLine : blngInvLines)
      {
         if(invNumberToBlngInvLineMap.containsKey(invLine.blng__Invoice__r.Zuora_Invoice_Number__c))
             invNumberToBlngInvLineMap.get(invLine.blng__Invoice__r.Zuora_Invoice_Number__c).add(invLine);
         else 
             invNumberToBlngInvLineMap.put(invLine.blng__Invoice__r.Zuora_Invoice_Number__c,new List<blng__InvoiceLine__c>{invLine});
      }
      //Prepare the list of records from Invocie Lines based on the Payments Invoice number
      for(String invLiNumbr : invNumPaymentMap.keySet())
      {//invNumberToBlngInvLineMap.keySet()
         if(invNumberToBlngInvLineMap.containsKey(invLiNumbr))
          {
              System.debug('IN Contains:'+(invLiNumbr));
              List<blng__InvoiceLine__c> temp = invNumberToBlngInvLineMap.get(invLiNumbr);
              for(blng__InvoiceLine__c invLi : temp){
                  //Create the Temp Allocation Table for bulk load
                  dm_PayAllocInvLineTemp__c obj = new dm_PayAllocInvLineTemp__c();
                  obj.Invoice_Line__c = invLi.Id; 
                  obj.Amount__c = invLi.blng__Subtotal__c;
                  obj.Payment__c = invNumPaymentMap.get(invLiNumbr).Id;
                  obj.Type__c = 'Allocation';
                  obj.Zuora_Invoice_Number__c = invLiNumbr;
                  forInsertAllocInvLi.add(obj);
              }
          }
      }
     if(forInsertAllocInvLi.size()>0)
          Database.Insert(forInsertAllocInvLi);
  }*/
  // The batch job finishes
  global void finish(Database.BatchableContext bc){ }
}
@isTest
public class dm_InvoiceIteratorBatchTest {
@Testsetup
       static void Testsetup(){
        //Account Creation
        Account objAccount = TestDataUtility.createAccount(
            'Test Account'
        );
        insert objAccount;
        //Opportunity Creation
        Opportunity objOpportunity = TestDataUtility.createOpportunity(
            'Test Opportunity',
            objAccount.Id,
            'Closed Won',
            Date.Today().Adddays(30),
            'New',
            Test.getStandardPricebookId()
        );
        insert objOpportunity;
        // Product Creation
        Product2 objProduct = TestDataUtility.createProduct(
            'Test Product',
            true,
            'Quantity',
            'Services',
            'pc1',
            'pc2',
            'pc3',
            'One-Time',
            null,
            'One-time',
            24,
            'Fixed Price',
            'List',null ,null ,null
        );
        insert objProduct;
        // PriceBookEntry Creation
        PriceBookEntry objPriceBookEntry = TestDataUtility.createpriceBookEntry(
            Test.getStandardPricebookId(),
            objProduct.Id,
            100000.00,
            True
        );
        insert objPriceBookEntry;
        
        // Quote Creation     
        SBQQ__Quote__c objQuote = TestDataUtility.createCPQQuote(
            true,
            'Quote',
            'ProductFamily__c',
            'Annual',
            'Front Load',
            24,
            date.today(),
            date.today().addMonths(24),
            objOpportunity.Id,
            objAccount.Id,
            'Draft'
        );
        
        objQuote.SBQQ__BillingFrequency__c= 'Monthly';
        objQuote.Manual_Fix__c= True;
        insert objQuote;
         // QuoteLine Creation
        SBQQ__QuoteLine__c objQuoteLine = TestDataUtility.createCPQQuoteLine(
            objPriceBookEntry.Id,
            1,
            objQuote.Id,
            3,
            objProduct.Id,
            Date.Today(),
            Date.Today().AddMonths(24)
        );
        objQuoteLine.Free_Months__c = 3;
        objQuoteLine.SBQQ__BillingFrequency__c = Null;
        objQuoteLine.SBQQ__ChargeType__c = 'Recurring';
        insert objQuoteLine;
        
        // Order Creation
        Order objOrder = TestDataUtility.createOrder(
            objAccount.id,
            'New',
            'Draft',
            Date.today(),
            Date.today().AddMonths(24),
            '1',
            'Net 15',
            objQuote.Id,
            objOpportunity.Id
        );
        insert objOrder;
        // blng__Invoice__c creation
        blng__Invoice__c objBlngInvoice = TestDataUtility.createBlngInvoice(
            objAccount.Id,
            objOrder.Id
        );

        objBlngInvoice.Invoice_Admin_Status__c = 'Active';
        objBlngInvoice.Product_Category__c = 'Licenses';
        objBlngInvoice.Custom_Invoice_Date__c = Date.today().addDays(-1);
        objBlngInvoice.blng__InvoiceDate__c = Date.today().addDays(-1);
        objBlngInvoice.Product_Categories__c = 'Licenses';
        objBlngInvoice.Invoice_Number__c = 0;
        objBlngInvoice.Zuora_Invoice_Number__c = '12345';
        objBlngInvoice.DM_Invoice__c = true;
        objBlngInvoice.Invoice_Number__c = 0;
        
        insert objBlngInvoice;
        //dm_Invoice_InvoiceLine__c Creation
        dm_Invoice_InvoiceLine__c ObjdmInvoice = new dm_Invoice_InvoiceLine__c();
        ObjdmInvoice.Opportunity__c = objOpportunity.id;
        ObjdmInvoice.Invoice_Invoice_Number__c= 'aEf7800000001s0';
        ObjdmInvoice.Order__c = objOrder.id;
        ObjdmInvoice.Quote__c = objQuote.id ;
        insert ObjdmInvoice;
        
}
    @isTest
   static void execute(){
        Test.startTest();
        dm_InvoicesIteratorBatch bc = new dm_InvoicesIteratorBatch();
        Database.executeBatch(bc);
        Test.stopTest();
}
}